"""
üìå–ù–∞ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –ø–æ –û–û–ü –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
—Ö—Ä–∞–Ω—è—â–∏–π –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É, –∞ —Ç–∞–∫–∂–µ –≤—ã—á–∏—Å–ª—è—é—â—É—é –ø–µ—Ä–∏–º–µ—Ç—Ä,
–ø–ª–æ—â–∞–¥—å –∏ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏ –≤—ã—á–∏—Ç–∞—Ç—å
–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –±–µ—Ä—è –∑–∞ –æ—Å–Ω–æ–≤—É –ø–µ—Ä–∏–º–µ—Ç—Ä.
üìå–ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ unittest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
"""
import math

from lesson10.tsk1 import Circle
import unittest


class TestCircle(unittest.TestCase):
    def setUp(self):
        self.circle1 = Circle(10)
        self.circle2 = Circle(20)
        self.circle3 = Circle(50)
        self.circle4 = Circle(100)

    def test_length_10(self):
        self.assertEqual(2 * math.pi * 10, self.circle1.get_length())

    def test_length_20(self):
        self.assertEqual(2 * math.pi * 20, self.circle2.get_length())

    def test_length_50(self):
        self.assertEqual(2 * math.pi * 50, self.circle3.get_length())

    def test_length_100(self):
        self.assertEqual(2 * math.pi * 100, self.circle4.get_length())


if __name__ == '__main__':
    unittest.main(verbosity=2)
