"""
üìå–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3-
—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
üìå–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
üìå–õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.
"""

import datetime
import logging
from pathlib import Path
import re

DIR_LOGS = Path.cwd() / 'logs'
FORMAT_MSG = "{asctime} {levelname} {funcName}: {msg}\n"

WEEKDAYS = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
MONTHS = ["", "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è",
          "–¥–µ–∫–∞–±—Ä—è"]


def get_logger(filename='logs/tsk4.log'):
    if not DIR_LOGS.is_dir():
        DIR_LOGS.mkdir()
    logging.basicConfig(filename=filename, filemode='a', encoding='utf-8', level=logging.DEBUG, style='{',
                        format=FORMAT_MSG)
    return logging.getLogger()


logger = get_logger()


def parse_some_data(txt: str, logger_=logger):
    pattern = r"([1-7]-.+) ([–∞-—è]+) ([–∞-—è]+)"
    if not re.findall(pattern, txt):
        logger_.warning("–¢–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É")
        return None
    num_month_week, weekday, month = txt.split()
    num_month_week = int(num_month_week.split('-')[0])
    weekday = WEEKDAYS.index(weekday) if weekday in WEEKDAYS else None
    month = MONTHS.index(month) if month in MONTHS else None
    return get_date(num_month_week, weekday, month)


def get_date(num_month_week, weekday, month, year=datetime.datetime.now().year):
    if num_month_week is not None and weekday is not None and month is not None:
        count = 0
        date = datetime.datetime(year=year, month=month, day=1)
        while date.month == month:
            if date.weekday() == weekday:
                count += 1
                if count == num_month_week:
                    break
            date += datetime.timedelta(days=1)
        return date
    return None


if __name__ == '__main__':
    res = parse_some_data("1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è")
    if res is not None:
        print(res)
    res = parse_some_data("3-—è —Å—Ä–µ–¥–∞ –º–∞—è")
    if res is not None:
        print(res)
