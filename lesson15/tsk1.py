"""
üìå–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å logging –¥–ª—è
–≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª.
üìå–ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å.
"""

import logging
from pathlib import Path

DIR_LOGS = Path.cwd() / 'logs'

if not DIR_LOGS.is_dir():
    DIR_LOGS.mkdir()

FORMAT_MSG = "{asctime} {levelname} {funcName}: {msg}"
logging.basicConfig(filename='logs/tsk1.log', filemode='a', encoding='utf-8', level=logging.DEBUG, style='{',
                    format=FORMAT_MSG)
logger = logging.getLogger()


def some_func(a: int | float, b: int | float):
    if b == 0:
        logger.warning(f"–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è: {float('inf')}")
        return float('inf')
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {a}/{b} —Ä–∞–≤–µ–Ω: {a / b}")
    return a / b


if __name__ == '__main__':
    some_func(3, 5)
    some_func(3.1, 1.3)
    some_func(3, 0)
