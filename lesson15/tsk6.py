"""
üìå–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥
–ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ü–ö.
üìå–°–æ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤ namedtuple.
üìå–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏—Ç:
‚óã –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞,
‚óã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª,
‚óã —Ñ–ª–∞–≥ –∫–∞—Ç–∞–ª–æ–≥–∞,
‚óã –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.
üìå–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è
–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
"""

import argparse
import os
from collections import namedtuple
from pathlib import Path
import logging

DIR_LOGS = Path.cwd() / 'logs'
FORMAT_MSG = "{asctime} {levelname} {funcName}: {msg}"

DirFileObject = namedtuple('DirFileObject', ['name_obj', 'extension', 'is_directory', 'parent_dir'])

lst_obj = []


def get_logger(filename='logs/tsk6.log'):
    if not DIR_LOGS.is_dir():
        DIR_LOGS.mkdir()
    logging.basicConfig(filename=filename, filemode='w', encoding='utf-8', level=logging.DEBUG, style='{',
                        format=FORMAT_MSG)
    return logging.getLogger()


logger = get_logger()


def parse_directory(path: Path):
    if not path.is_dir():
        logger.warning(f"–ü–∞–ø–∫–∞ {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∫ –Ω–µ–π –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞\n")
        return None
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {path}")
    paths = [path]
    while paths:
        tmp_path = paths.pop()
        for elem in os.listdir(tmp_path):
            if Path(Path(tmp_path) / elem).is_dir():
                paths.append(Path(tmp_path)/elem)
            obj = get_object(tmp_path, elem)
            lst_obj.append(obj)
            logger.info(f"–û–±—ä–µ–∫—Ç {obj} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–≥")
    logger.info(f"–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n{'==' * 30}")
    pass


def get_object(root: Path, obj: str):
    name_obj, extension = obj.rsplit('.', maxsplit=1) if '.' in obj and Path(root / obj).is_file() else (obj, '')
    is_directory = Path(Path(root) / obj).is_dir()
    parent_dir = str(root).rsplit(os.sep)[-1]
    return DirFileObject(name_obj, extension, is_directory, parent_dir)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="–ü–∞—Ä—Å–µ—Ä –ø–∞–ø–∫–∏")
    parser.add_argument('path', metavar='PATH', type=str, nargs='?', default=Path.cwd())
    args = parser.parse_args()
    parse_directory(Path(args.path))
