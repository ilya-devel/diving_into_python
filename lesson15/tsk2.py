"""
üìå–ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–π
–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä. –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë
—Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª.
üìå–ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ
–º–æ–¥—É–ª—å logging.
"""

import logging
from pathlib import Path
from functools import wraps

DIR_LOGS = Path.cwd() / 'logs'
FORMAT_MSG = "{asctime} {levelname}: {msg}\n"


def get_logger():
    if not DIR_LOGS.is_dir():
        DIR_LOGS.mkdir()
    logging.basicConfig(filename='logs/tsk2.log', filemode='a', encoding='utf-8', level=logging.DEBUG, style='{',
                        format=FORMAT_MSG)
    return logging.getLogger()


logger = get_logger()


def logging_function(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        logger.info(
            f"{func.__name__}: args = {args}\nkwargs = {kwargs}")
        result = func(*args, **kwargs)
        return result

    return wrapper


@logging_function
def some_func(*args, **kwargs):
    msg = f"args = {args}\nkwargs = {kwargs}"
    return msg


if __name__ == '__main__':
    print(some_func(1, 5, 's', 123, key=123, som="less"))
